{"version":3,"sources":["components/Preloader.js","serviceWorker.js","assets/store/reducers/guides.js","assets/store/reducers/index.js","index.js","assets/store/configureStore.js"],"names":["Preloader","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initialState","isReady","items","combineReducers","guides","action","type","payload","store","createStore","rootReducer","applyMiddleware","logger","Layout","React","lazy","ReactDOM","render","fallback","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uGAAA,oBAkBeA,IAhBG,WACd,OACI,yBAAKC,UAAU,aACf,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,kC,qICD1BC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,oEChG3DC,EAAe,CACjBC,SAAQ,EACRC,MAAO,MCGIC,cAAgB,CAC3BC,ODDW,WAAmC,IAAlCZ,EAAiC,uDAAzBQ,EAAcK,EAAW,uCAE7C,OAAQA,EAAOC,MACX,IAAK,aACD,OAAO,2BACAd,GADP,IAEIU,MAAOG,EAAOE,QACdN,SAAQ,IAEZ,IAAK,eACD,OAAO,2BACAT,GADP,IAEIS,QAAQI,EAAOE,UAG3B,QACI,OAAOf,MEVbgB,ECLUC,YAAYC,EAAaC,YAAgBC,MDOnDC,EAASC,IAAMC,MAAK,kBAAM,uDAEhCC,IAASC,OACP,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUU,SAAU,kBAAC9C,EAAA,EAAD,OAClB,kBAACyC,EAAD,SAKNM,SAASC,eAAe,SHFnB,SAAkBtC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsC,IAAIC,kBAAwB9C,OAAOC,SAAS8C,MACpDC,SAAWhD,OAAOC,SAAS+C,OAIvC,OAGFhD,OAAOiD,iBAAiB,QAAQ,WAC9B,IAAM5C,EAAK,UAAMyC,kBAAN,sBAEPhD,IAgEV,SAAiCO,EAAOC,GAEtC4C,MAAM7C,EAAO,CACX8C,QAAS,CAAE,iBAAkB,YAE5BzC,MAAK,SAAA0C,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjD,UAAUC,cAAciD,MAAM/C,MAAK,SAAAC,GACjCA,EAAa+C,aAAahD,MAAK,WAC7BV,OAAOC,SAAS0D,eAKpBvD,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyC,CAAwBvD,EAAOC,GAI/BC,UAAUC,cAAciD,MAAM/C,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OGvB/BE,K","file":"static/js/main.dd104357.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className=\"container\">\r\n        <div className=\"item-1\"><div></div></div>\r\n        <div className=\"item-2\"><div></div></div>\r\n        <div className=\"item-3\"><div></div></div>\r\n        <div className=\"item-4\"><div></div></div>\r\n        <div className=\"item-5\"><div></div></div>\r\n        <div className=\"item-6\"><div></div></div>\r\n        <div className=\"item-7\"><div></div></div>\r\n        <div className=\"item-8\"><div></div></div>\r\n        <div className=\"item-9\"><div></div></div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    isReady:false,\r\n    items: null     \r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case 'SET_GUIDES':\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                isReady:true\r\n            };\r\n            case 'SET_IS_READY':\r\n                return {\r\n                    ...state,\r\n                    isReady:action.payload\r\n                };\r\n              \r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport guides from \"./guides\";\r\n\r\n\r\nexport default combineReducers({\r\n    guides\r\n    });","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport Preloader from \"./components/Preloader\";\n\nimport './index.css';\n\nimport createStore from './assets/store/configureStore';\nconst store = createStore();\n\nconst Layout = React.lazy(() => import('./components/Layout'));\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <Suspense fallback={<Preloader />}>\n        <Layout />\n      </Suspense>\n    </HashRouter>\n  </Provider>\n  ,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default ()=>{\r\n  const store = createStore(rootReducer, applyMiddleware(logger));\r\n  return store;\r\n}"],"sourceRoot":""}